<?xml version="1.0"?>

<!-- $Id$ -->
<project name="mcidasv" default="info" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <!-- Directory definitions -->
    <property name="base.dir" location="." />
    <property name="build.dir" location="${base.dir}/build/antbuild" />
    <property name="dist.dir" location="${base.dir}/dist" />
    <property name="lib.dir" location="${base.dir}/lib" />
    <property name="sharedlib.dir" location="${lib.dir}/share" />
    <property name="nativelib.dir" location="${lib.dir}/native" />
    <property name="linuxx86lib.dir" location="${lib.dir}/linux-i586" />
    <property name="linuxx64lib.dir" location="${lib.dir}/linux-amd64" />
    <property name="windowsx86lib.dir" location="${lib.dir}/windows-i586" />
    <property name="windowsx64lib.dir" location="${lib.dir}/windows-amd64" />
    <property name="macosxlib.dir" location="${lib.dir}/macosx" />
    <property name="idvlib.dir" location="${base.dir}/../IDV/lib" />
    <property name="resource.dir" location="${base.dir}/edu/wisc/ssec/mcidasv/resources" />
    <property name="release.dir" location="${base.dir}/release" />
    <property name="tools.dir" location="${base.dir}/tools" />
    <property name="webstart.dir" location="${release.dir}/webstart" />
    <property name="sm.dir" location="${base.dir}/edu/wisc/ssec/mcidasv/startupmanager" />
    <property name="doc.dir" location="${base.dir}/docs" />
    <property name="javadoc.dir" location="${doc.dir}/javadoc" />
    <property name="userguide.dir" location="${doc.dir}/userguide" />
    <property name="heap.dir" location="/tmp/mcidasv-heapdump.hprof" />

    <!--
      Set the "uiscale" property to control Swing UI scaling.

      If you're using a HiDPI display (or everything in McV just looks super tiny),
      try setting this value to 2.

      Note: this only applies to the "jar.runlarge.jpms" and "debug.runlarge.jpms" targets
      (they use Java 9+).


    -->
<!--    <property name="uiscale" value="1"/>-->
    <!--
      Used to control the "mcidasv.darkmode" property via the Ant commandline (like uiscale).
      Default behavior is to disable the dark mode L&F.
    -->
    <property name="darkmode" value="false" />

    <!--
      This section attempts to set the path to the local ADDE servers in
      a platform independent way. 

      If you need to use a specific path, you must run Ant like so:
        ant -Daddeservers.dir="<McIDAS-V INSTALL PATH>/adde" <TARGET>

      Some examples:
        ant -Daddeservers.dir="/Applications/mcidasv/nightly/adde" jar.runlarge
        ant -Daddeservers.dir="C:\\mcidasv\\nightly\\adde" jar.runlarge
    -->
    <condition property="addeservers.dir" value="${base.dir}\\lib\\build\\adde\\windows">
        <os family="windows" />
    </condition>
    <condition property="addeservers.dir" value="${base.dir}/lib/build/adde/linux">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>
    <condition property="addeservers.dir" value="${base.dir}/lib/build/adde/macos-intel">
        <os family="mac" />
    </condition>
    <!-- end of local server path stuff -->

    <!--
      This section attempts to set the McIDAS-V userpath (where RESOLV.SRV is)
      in a platform independent way. In order to take advantage of this, you
      simply need to have run McIDAS-V.

      The installer will suggest the following (depending on platform):

        Windows: C:\Users\YOUR_USER\McIDAS-V
        Linux  : /home/YOUR_USER/McIDAS-V
        OS X   : /Users/YOUR_USER/Documents/McIDAS-V

      If you need to use a specific path, you must run Ant like so:
        ant -Duserpath.dir="<USER PATH>" <TARGET>

      Some examples:
        ant -Duserpath.dir="/tmp/mcidasv" jar.runlarge
        ant -Duserpath.dir="C:\\temp\\mcidasv" jar.runlarge
      -->
    <condition property="userpath.dir" value="${user.home}\\McIDAS-V">
        <os family="windows" />
    </condition>
    <condition property="userpath.dir" value="${user.home}/McIDAS-V">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>
    <condition property="userpath.dir" value="${user.home}/Documents/McIDAS-V">
        <os family="mac" />
    </condition>
    <!-- end of userpath stuff -->

    <!--
      check to see if we should pass -Xdock:name JVM argument.
      This argument causes the JVM to error on platforms other than macOS!
      Used in the jar.runlarge and jar.runlarge.jpms targets.
     -->
    <condition property="build.macos" value="true">
        <os family="mac" />
    </condition>

    <condition property="build.macos-aarch64" value="true">
        <os family="mac" arch="aarch64" />
    </condition>

    <condition property="build.macos-x86_64" value="true">
        <or>
            <os family="mac" arch="amd64" />
            <os family="mac" arch="x86_64" />
        </or>
    </condition>

    <condition property="build.windows" value="true">
        <os family="windows" />
    </condition>

    <condition property="build.linux" value="true">
        <and>
            <os family="unix" />
            <not>
                <os family="mac" />
            </not>
        </and>
    </condition>

    <!-- end dock jvm arg handling -->

    <!-- Attempt to load the version property file -->
    <property file="${resource.dir}/version.properties" />
    <property name="mcv.version" value="${mcidasv.version.major}.${mcidasv.version.minor}${mcidasv.version.release}-SNAPSHOT" />
    <property name="install4j.dir" value="${base.dir}/../install4j" />
    <property name="media.dir" location="${install4j.dir}/media" />
    <property name="source.file" value="McIDAS-V_${mcidasv.version.major}.${mcidasv.version.minor}${mcidasv.version.release}_source.jar" />
 
    <!-- Binary file definitions -->
    <property name="java.bin" location="../java_jdk/bin/java" />
    <property name="jhindexer.bin" location="../jh2.0/javahelp/bin/jhindexer" />
    <property name="install4jc.bin" location="${install4j.dir}/bin/install4jc" />

    <!-- Required library jar file names -->
    <property name="visad.jar" value="visad.jar" />
    <property name="idv.jar" value="idv.jar" />

    <!-- Property file names -->
    <property name="ver.props" value="${resource.dir}/version.properties" />
    <property name="build.props" value="${resource.dir}/build.properties" />

    <!-- Jar file names -->
    <property name="app.jarname" value="mcidasv-${mcv.version}.jar" />
    <property name="local-idv.jarname" value="local-idv-${mcv.version}.jar" />
    <property name="javadoc.jarname" value="mcv_javadoc-${mcv.version}.jar" />
    <property name="userguide.jarname" value="mcv_userguide-${mcv.version}.jar" />
    <property name="source.jarname" value="mcv_source-${mcv.version}.jar" />

    <!-- Jar signing -->
    <property name="key.store" location="${release.dir}/mcv-keystore" />
    <property name="key.alias" value="McIDAS-V" />

    <!-- Main class for jar and run targets -->
    <property name="app.mainclass" value="edu.wisc.ssec.mcidasv.McIDASV" />

    <!-- Main class for startup manager -->
    <property name="app.smclass"
    value="edu.wisc.ssec.mcidasv.startupmanager.StartupManager" />
    <property name="app.smjar" value="startupmanager-${mcv.version}.jar" />

    <!-- Properties for the Jython console -->
    <property name="jython.class" value="edu.wisc.ssec.mcidasv.jython.Console" />
    <property name="jython.jarfile" value="console-${mcv.version}.jar" />
    <property name="jython.dir" value="${base.dir}/edu/wisc/ssec/mcidasv/jython" />
    <property name="jython.lib" value="${idvlib.dir}/jython.jar" />

    <!-- Run target options -->
    <!-- run.log.levels may be one of: TRACE, DEBUG, INFO, WARN, ERROR or OFF -->
    <property name="run.log.level" value="INFO" />
    <property name="run.smallheap" value="1024m" />
    <property name="run.largeheap" value="6G" />

    <property name="logback.default.config" value="${userpath.dir}/logback.xml" />

    <!--
      These values are meant to be set from the commandline, and is used in the
      "installers" target.

      Linux example:
          ant -Dwindows.keystore=$(cat SOME_FILE_CONTAINING_PASSWORD.txt) \
              dist installers_normal
      macOS example:
          ant -Dmacos.keystore=$(cat ANOTHER_FILE_CONTAINING_MACOS_CERT_PASS.txt) \
              -Dnotarization.password=$(cat YET_ANOTHER_FILE_WITH_NOTARIZATION_PASS.txt) \
              dist installers_macos
    -->
    <property name="windows.keystore" value="DUMMY VALUE" />
    <property name="macos.keystore" value="DUMMY VALUE" />
    <property name="notarization.password" value="DUMMY VALUE" />

    <!-- VisAD Properties -->
    <!-- visad.texturemax is a workaround for the bizarro problem detailed at
         dcdbs.ssec.wisc.edu/mcidasv/forums/viewtopic.php?f=24&t=1378 -->
    <property name="visad.texturemax" value="4096" />

    <!-- Compiler options -->
    <property name="debug.flag" value="true" />
    <property name="deprecation.flag" value="false" />
    <property name="source.ver" value="21" />
    <property name="target.ver" value="21" />

    <!-- Which warnings to show, use javac -X for help -->
    <property name="xlint" value="deprecation" />

    <!-- Javadoc options -->
    <property name="javadoc.level" value="private" />
    
    <!-- Maximum number of errors javadoc should report.
         
         This value can be overridden by launching Ant like so:
         $ ant -Djavadoc.errors.maxnum=31337 javadoc
         
         Higher values means javadoc will take longer to finish. -->
    <property name="javadoc.errors.maxnum" value="100" />
    
    <!-- Maximum number of errors javadoc should report.
         
         This value can be overridden by launching Ant like so:
         $ ant -Djavadoc.warnings.maxnum=31337 javadoc
         
         Higher values means javadoc will take longer to finish. -->
    <property name="javadoc.warnings.maxnum" value="100" />
    
    <!-- Use these properties to make changing the versions of related JARs
        (see SLF4J or Logback) a bit less tedious. -->
    <property name="slf4j.version" value="2.0.17" />
    <property name="logback.version" value="1.5.18" />
    <property name="miglayout.version" value="11.4.2" />
    <property name="jogamp.version" value="2.5.0" />
    <property name="swingx.version" value="1.6.5-1" />
    <property name="eventbus.version" value="1.4" />
    <property name="commons-math.version" value="3.6.1" />
    <property name="rsyntaxtextarea.version" value="3.6.0" />
    <property name="sysout.version" value="1.0.2" />
    <property name="jython.version" value="2.7.4" />
    <property name="juniversalchardet.version" value="2.4.0" />
    <property name="jsattrack.version" value="4.2.3" />
    <property name="commons-httpclient.version" value="3.1" />
    <property name="jcodec.version" value="0.2.6-SNAPSHOT" />
    <property name="idv.version" value="6.3u1-SNAPSHOT" />
    <property name="ncidv.version" value="5.9.1-SNAPSHOT" />
    <property name="visad.version" value="2.0-SNAPSHOT" />
    <property name="flatlaf.version" value="3.6" />
    <property name="batik.version" value="1.18" />
    <property name="fop-xmlgraphics.version" value="2.10" />
    <property name="commons-collections.version" value="4.5.0-M3" />
    <property name="hydra.version" value="5.0.2" />

<!--    <property name="jansi.version" value="2.4.0" />-->

    <!-- note that the J3D JARs available from http://jogamp.org/deployment/java3d/
         do not (as of 20140915) have the version string in the filenames.
         this must be done manually for now. -->
    <property name="java3d.version" value="1.6.2" />

    <!-- The CLASSPATH specified within McV's manifest 
         Note: if you're going to modify this property, be sure to make similar
         modifications to the "mcv.libs" fileset. -->
<!--    <property name="jar.base.classpath" value="jansi-${jansi.version}.jar ${userguide.jarname} ncIdv-${ncidv.version}.jar external-trimmed-${idv.version}.jar gluegen-rt-${jogamp.version}.jar jogamp-no-natives-${jogamp.version}.jar sysout-over-slf4j-${sysout.version}.jar miglayout-core-${miglayout.version}.jar miglayout-swing-${miglayout.version}.jar eventbus-${eventbus.version}.jar logback-core-${logback.version}.jar logback-classic-${logback.version}.jar log4j-over-slf4j-${slf4j.version}.jar slf4j-api-${slf4j.version}.jar ${local-idv.jarname} commons-math3-${commons-math.version}.jar rsyntaxtextarea-${rsyntaxtextarea.version}.jar jul-to-slf4j-${slf4j.version}.jar local-visad-${idv.version}.jar visad-${visad.version}.jar idv-${idv.version}.jar ${userguide.jarname} JSatTrak-${jsattrack.version}.jar swingx-common-${swingx.version}.jar j3dcore-${java3d.version}.jar j3dutils-${java3d.version}.jar vecmath-${java3d.version}.jar jython-standalone-${jython.version}.jar juniversalchardet-${juniversalchardet.version}.jar commons-httpclient-${commons-httpclient.version}.jar jcodec-javase-${jcodec.version}.jar jcodec-${jcodec.version}.jar flatlaf-${flatlaf.version}-no-natives.jar flatlaf-extras-${flatlaf.version}.jar flatlaf-intellij-themes-${flatlaf.version}.jar flatlaf-swingx-${flatlaf.version}.jar batik-all-${batik.version}.jar batik-anim-${batik.version}.jar batik-awt-util-${batik.version}.jar batik-bridge-${batik.version}.jar batik-codec-${batik.version}.jar batik-constants-${batik.version}.jar batik-css-${batik.version}.jar batik-dom-${batik.version}.jar batik-ext-${batik.version}.jar batik-extension-${batik.version}.jar batik-gui-util-${batik.version}.jar batik-gvt-${batik.version}.jar batik-i18n-${batik.version}.jar batik-parser-${batik.version}.jar batik-script-${batik.version}.jar batik-shared-resources-${batik.version}.jar batik-svg-dom-${batik.version}.jar batik-svgbrowser-${batik.version}.jar batik-svggen-${batik.version}.jar batik-svgrasterizer-${batik.version}.jar batik-swing-${batik.version}.jar batik-test-${batik.version}.jar batik-test-old-${batik.version}.jar batik-test-svg-${batik.version}.jar batik-test-swing-${batik.version}.jar batik-transcoder-${batik.version}.jar batik-util-${batik.version}-tests.jar batik-util-${batik.version}.jar batik-xml-${batik.version}.jar external-trimmed-5.7.jar fop-transcoder-allinone-${fop-xmlgraphics.version}.jar rhino-1.7.15.jar serializer-2.7.3.jar xml-apis-1.4.01.jar xml-apis-ext-1.3.04.jar xmlgraphics-commons-${fop-xmlgraphics.version}.jar commons-collections4-${commons-collections.version}.jar hydra-resources-${hydra.version}.jar" />-->
    <property name="jar.base.classpath" value="${userguide.jarname} ncIdv-${ncidv.version}.jar external-trimmed-${idv.version}.jar gluegen-rt-${jogamp.version}.jar jogamp-no-natives-${jogamp.version}.jar sysout-over-slf4j-${sysout.version}.jar miglayout-core-${miglayout.version}.jar miglayout-swing-${miglayout.version}.jar eventbus-${eventbus.version}.jar logback-core-${logback.version}.jar logback-classic-${logback.version}.jar log4j-over-slf4j-${slf4j.version}.jar slf4j-api-${slf4j.version}.jar ${local-idv.jarname} commons-math3-${commons-math.version}.jar rsyntaxtextarea-${rsyntaxtextarea.version}.jar jul-to-slf4j-${slf4j.version}.jar local-visad-${idv.version}.jar visad-${visad.version}.jar idv-${idv.version}.jar ${userguide.jarname} JSatTrak-${jsattrack.version}.jar swingx-common-${swingx.version}.jar j3dcore-${java3d.version}.jar j3dutils-${java3d.version}.jar vecmath-${java3d.version}.jar jython-standalone-${jython.version}.jar juniversalchardet-${juniversalchardet.version}.jar commons-httpclient-${commons-httpclient.version}.jar jcodec-javase-${jcodec.version}.jar jcodec-${jcodec.version}.jar flatlaf-${flatlaf.version}-no-natives.jar flatlaf-extras-${flatlaf.version}.jar flatlaf-intellij-themes-${flatlaf.version}.jar flatlaf-swingx-${flatlaf.version}.jar batik-all-${batik.version}.jar batik-anim-${batik.version}.jar batik-awt-util-${batik.version}.jar batik-bridge-${batik.version}.jar batik-codec-${batik.version}.jar batik-constants-${batik.version}.jar batik-css-${batik.version}.jar batik-dom-${batik.version}.jar batik-ext-${batik.version}.jar batik-extension-${batik.version}.jar batik-gui-util-${batik.version}.jar batik-gvt-${batik.version}.jar batik-i18n-${batik.version}.jar batik-parser-${batik.version}.jar batik-script-${batik.version}.jar batik-shared-resources-${batik.version}.jar batik-svg-dom-${batik.version}.jar batik-svgbrowser-${batik.version}.jar batik-svggen-${batik.version}.jar batik-svgrasterizer-${batik.version}.jar batik-swing-${batik.version}.jar batik-test-${batik.version}.jar batik-test-old-${batik.version}.jar batik-test-svg-${batik.version}.jar batik-test-swing-${batik.version}.jar batik-transcoder-${batik.version}.jar batik-util-${batik.version}-tests.jar batik-util-${batik.version}.jar batik-xml-${batik.version}.jar external-trimmed-5.7.jar fop-transcoder-allinone-${fop-xmlgraphics.version}.jar rhino-1.7.15.jar serializer-2.7.3.jar xml-apis-1.4.01.jar xml-apis-ext-1.3.04.jar xmlgraphics-commons-${fop-xmlgraphics.version}.jar commons-collections4-${commons-collections.version}.jar hydra-resources-${hydra.version}.jar" />

    <!-- List of McIDAS-V JAR files.
         Note: if you're going to modify this fileset, be sure to make similar
         modifications to the "jar.base.classpath" property. -->
    <fileset id="mcv.libs" dir="${dist.dir}">
<!--
        <include name="jansi-${jansi.version}.jar" />
-->
        <include name="hydra-resources-${hydra.version}.jar" />
        <include name="commons-collections4-${commons-collections.version}.jar"/>
        <include name="flatlaf-${flatlaf.version}-no-natives.jar" />
        <include name="flatlaf-extras-${flatlaf.version}.jar" />
        <include name="flatlaf-intellij-themes-${flatlaf.version}.jar" />
        <include name="flatlaf-swingx-${flatlaf.version}.jar" />
        <include name="batik-all-${batik.version}.jar" />
        <include name="batik-anim-${batik.version}.jar" />
        <include name="batik-awt-util-${batik.version}.jar" />
        <include name="batik-bridge-${batik.version}.jar" />
        <include name="batik-codec-${batik.version}.jar" />
        <include name="batik-constants-${batik.version}.jar" />
        <include name="batik-css-${batik.version}.jar" />
        <include name="batik-dom-${batik.version}.jar" />
        <include name="batik-ext-${batik.version}.jar" />
        <include name="batik-extension-${batik.version}.jar" />
        <include name="batik-gui-util-${batik.version}.jar" />
        <include name="batik-gvt-${batik.version}.jar" />
        <include name="batik-i18n-${batik.version}.jar" />
        <include name="batik-parser-${batik.version}.jar" />
        <include name="batik-script-${batik.version}.jar" />
        <include name="batik-shared-resources-${batik.version}.jar" />
        <include name="batik-svg-dom-${batik.version}.jar" />
        <include name="batik-svgbrowser-${batik.version}.jar" />
        <include name="batik-svggen-${batik.version}.jar" />
        <include name="batik-svgrasterizer-${batik.version}.jar" />
        <include name="batik-swing-${batik.version}.jar" />
        <include name="batik-test-${batik.version}.jar" />
        <include name="batik-test-old-${batik.version}.jar" />
        <include name="batik-test-svg-${batik.version}.jar" />
        <include name="batik-test-swing-${batik.version}.jar" />
        <include name="batik-transcoder-${batik.version}.jar" />
        <include name="batik-util-${batik.version}-tests.jar" />
        <include name="batik-util-${batik.version}.jar" />
        <include name="batik-xml-${batik.version}.jar" />
        <include name="fop-transcoder-allinone-${fop-xmlgraphics.version}.jar" />
        <include name="rhino-1.7.15.jar" />
        <include name="serializer-2.7.3.jar" />
        <include name="xml-apis-1.4.01.jar" />
        <include name="xml-apis-ext-1.3.04.jar" />
        <include name="xmlgraphics-commons-${fop-xmlgraphics.version}.jar" />
        <include name="jcodec-${jcodec.version}.jar" />
        <include name="jcodec-javase-${jcodec.version}.jar" />
        <include name="commons-httpclient-${commons-httpclient.version}.jar" />
        <include name="swingx-common-${swingx.version}.jar" />
        <include name="sysout-over-slf4j-${sysout.version}.jar" />
        <include name="miglayout-core-${miglayout.version}.jar" />
        <include name="miglayout-swing-${miglayout.version}.jar" />
        <include name="eventbus-${eventbus.version}.jar" />
        <include name="logback-core-${logback.version}.jar" />
        <include name="logback-classic-${logback.version}.jar" />
        <include name="log4j-over-slf4j-${slf4j.version}.jar" />
        <include name="slf4j-api-${slf4j.version}.jar" />
        <include name="${local-idv.jarname}" />
        <include name="commons-math3-${commons-math.version}.jar" />
        <include name="rsyntaxtextarea-${rsyntaxtextarea.version}.jar" />
        <include name="jul-to-slf4j-${slf4j.version}.jar" />
        <include name="JSatTrak-${jsattrack.version}.jar"/>
        <include name="j3dcore-${java3d.version}.jar" />
        <include name="j3dutils-${java3d.version}.jar" />
        <include name="vecmath-${java3d.version}.jar" />
<!--        <include name="jogamp-all-${jogamp.version}.jar" />-->
        <include name="jython-standalone-${jython.version}.jar" />
        <include name="juniversalchardet-${juniversalchardet.version}.jar" />
    </fileset>

    <!-- need to extract ncIdv.jar so that it comes first on the classpath.
         it turns out that both ncIdv.jar and external.jar ship different
         versions of org.apache.http.impl.client.AbstractHttpClient! -->
    <fileset id="netcdf.libs" dir="${dist.dir}">
        <include name="ncIdv-${ncidv.version}.jar" />
    </fileset>

    <!-- List of IDV jars -->
    <fileset id="idv.libs" dir="${dist.dir}">
        <include name="auxdata-${idv.version}.jar" />
        <include name="local-visad-${idv.version}.jar" />
        <include name="visad-${visad.version}.jar" />
        <include name="external-trimmed-${idv.version}.jar" />
        <include name="idv-${idv.version}.jar" />
    </fileset>

    <!-- Shared classpath -->
    <path id="app.classpath">
        <pathelement location="${dist.dir}/${app.jarname}" />
        <pathelement location="${dist.dir}/${local-idv.jarname}" />
        <pathelement location="${dist.dir}/${userguide.jarname}" />
        <pathelement location="${dist.dir}/gluegen-rt-${jogamp.version}.jar" />
        <pathelement location="${dist.dir}/jogamp-no-natives-${jogamp.version}.jar" />
        <fileset refid="mcv.libs" />
        <fileset refid="netcdf.libs" />
        <fileset refid="idv.libs" />
    </path>

    <!--
    The difference between build.classpath and app.classpath is that
    app.classpath includes the Jogamp JAR file. This is required because the
    JAR uses annotations meant for Java 11 during the compile process...meaning
    that we would not be able to compile on Java 8 and Java 11 if jogamp-all
    was on the classpath. It runs without any problems though!
    
    An easy way to think about this is to use the example of Java IDEs
    allowing you to categorize a JAR as either a "runtime dependency" or a
    "build dependency". Consider app.classpath to be the set of runtime JARs,
    and build.classpath to be the set of JARs needed to compile.
    -->
    <path id="build.classpath">
        <pathelement location="${dist.dir}/${app.jarname}" />
        <pathelement location="${dist.dir}/${local-idv.jarname}" />
        <pathelement location="${dist.dir}/${userguide.jarname}" />
        <fileset refid="mcv.libs" />
        <fileset refid="netcdf.libs" />
        <fileset refid="idv.libs" />
    </path>
    
    <path id="bundle.classpath">
        <pathelement location="${dist.dir}/${app.jarname}" />
        <pathelement location="${dist.dir}/${local-idv.jarname}" />
        <fileset refid="mcv.libs" />
        <fileset refid="netcdf.libs" />
        <fileset refid="idv.libs" />
    </path>

    <!-- Files to include in application jar -->
    <patternset id="jar.includes">
        <include name="EdtRuleChecker.class" />
        <include name="edu/**/*.class" />
        <include name="edu/**/resources/**/*" />
        <include name="edu/**/images/**/*" />
        <include name="logback.xml" />
        <include name="logback-stdout.xml" />
    </patternset>

    <!-- Files to include in local-idv jar -->
    <patternset id="local-idv.includes">
        <include name="ucar/**/*.class" />
        <include name="visad/**/*.class" />
        <include name="HTTPClient/**/*.class" />
        <include name="Jama/**/*.class" />
        <include name="gnu/**/*.class" />
        <include name="loci/**/*.class" />
        <include name="ncsa/**/*.class" />
        <include name="nom/**/*.class" />
    </patternset>

    <!-- Files to include in the startup manager jar -->
    <patternset id="startupmanager.includes">
        <include name="edu/**/startupmanager/*.class" />
        <include name="edu/**/startupmanager/options/*.class" />
        <include name="edu/wisc/ssec/mcidasv/resources/icons/prefs/*" />
        <include name="edu/wisc/ssec/mcidasv/Constants.class" />
        <include name="edu/**/images/mcidasv_logo.gif" />
    </patternset>

    <!-- Files that needed by the Jython console JAR. -->
    <patternset id="jython.includes">
        <include name="edu/wisc/ssec/mcidasv/util/Contract.class" />
        <include name="edu/wisc/ssec/mcidasv/jython/**/*.class" />
    </patternset>

    <macrodef name="git">
        <attribute name="command" />
        <attribute name="dir" default="" />
        <attribute name="remote" default="origin" />
        <attribute name="branch" default="master" />
        <element name="args" optional="true" />
        <sequential>
            <echo message="git @{command} @{remote} @{branch}" />
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}" />
                <arg value="@{remote}" />
                <arg value="@{branch}" />
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="git-pull-rebase">
        <attribute name="dir" default="" />
        <attribute name="remote" default="origin" />
        <attribute name="branch" default="master" />
        <sequential>
            <echo message="git stash" />
            <exec executable="git" dir="@{dir}">
                <arg value="stash" />
            </exec>
            <echo message="git fetch @{remote}" />
            <exec executable="git" dir="@{dir}">
                <arg value="fetch" />
                <arg value="@{remote}" />
            </exec>
            <echo message="git pull --rebase @{remote} @{branch}" />
            <exec executable="git" dir="@{dir}">
                <arg value="pull" />
                <arg value="--rebase" />
                <arg value="@{remote}" />
                <arg value="@{branch}" />
            </exec>
            <echo message="git stash pop" />
            <exec executable="git" dir="@{dir}">
                <arg value="stash" />
                <arg value="pop" />
            </exec>
        </sequential>
    </macrodef>

    <!-- Controls the status of Java's assertion feature. -->
    <assertions id="mcv.assertions">
        <!-- Enable all assertions: -->
        <!-- <enable/> -->

        <!-- Disable all assertions (remember the system assert attr above! -->
        <!-- <disable/> -->
        <disable/>

        <!--
         Enable assertions for the Mcv choosers, but disable any assertions in
         VisAD's HDF5 package:
         -->
        <!-- <enable package="edu.wisc.ssec.mcidasv.chooser"/> -->
        <!-- <disable package="visad.data.hdf5"/> -->
    </assertions>

    <!-- Print out some of the setting for this build file -->
    <target name="info" description="Print various significant property values">
        <echo>
            == ANT =======================
            ant java version: ${ant.java.version}
            ant lib dir: ${ant.library.dir}
            ant home: ${ant.home}
            ant basedir: ${base.dir}

            == SYSTEM ====================
            os  : ${os.name}
            arch: ${os.arch}
            build.macos: ${build.macos}
            build.macos-aarch64: ${build.macos-aarch64}
            build.macos-x86_64 : ${build.macos-x86_64}
            build.linux  : ${build.linux}
            build.windows: ${build.windows}

            == JAVA ======================
            java home: ${java.home}
            java version: ${java.runtime.version}
            javadoc access: ${javadoc.level}

            == COMPILER OPTIONS ==========
            source: ${source.ver}
            target: ${target.ver}
            debug(-g): ${debug.flag}
            deprecation: ${deprecation.flag}
            Xlint warn: ${xlint}

            == PROPERTIES ================
            libdir: ${lib.dir}
            idvlibdir: ${idvlib.dir}
            javadoc: ${javadoc.dir}
            User Guide: ${userguide.dir}
            Main Class: ${app.mainclass}

            == VERSIONS ==================
            JogAmp (jogl/joal/jocl/gluegen): ${jogamp.version}
            Java3D: ${java3d.version}
            SLF4J: ${slf4j.version}
            Logback: ${logback.version}
            MigLayout: ${miglayout.version}
        </echo>
    </target>

    <!-- Delete all class files and temporary build files -->
    <target name="clean" description="Delete all class files and temporary build files">
        <delete dir="${dist.dir}" failonerror="false" />
        <delete dir="${javadoc.dir}" failonerror="false" />
        <delete dir="${base.dir}/build" failonerror="false" />
        <delete failonerror="false">
            <fileset dir="${base.dir}/edu" includes="**/*.class" />
        </delete>
        <delete failonerror="false">
            <fileset dir="${base.dir}/ucar" includes="**/*.class" />
        </delete>
        <delete file="${build.props}" failonerror="false" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${javadoc.dir}" />
        <mkdir dir="${build.dir}" />
    </target>

    <target name="gitupdate" description="Get the latest McIDAS-V source from Github.">
        <git-pull-rebase dir="${base.dir}" />
    </target>

    <target name="processdocs" description="Keep Git up to date with changes that were presumably synced from web server.">
        <exec executable="${basedir}/tools/process_dreamweaver_changes.php" dir="${basedir}/tools" />
    </target>

    <target name="jythondocs" description="Generate HTML from McIDAS-V Jython docstrings.">
        <exec executable="${basedir}/tools/apidocs/make_html_docs.sh" dir="${basedir}/tools/apidocs" />
    </target>

    <target name="getidvjars" description="Get the latest IDV jar files from Unidata">
        <exec executable="${basedir}/tools/get_idv_latest.sh" dir="${basedir}/tools" />
    </target>

    <target name="getvisadjar" description="Get the latest VisAD jar file from SSEC">
        <exec executable="${basedir}/tools/get_visad_latest.sh" dir="${basedir}/tools" />
    </target>

    <target name="copy.build.props" description="Set build properties">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm"
            timezone="UTC" />
        </tstamp>
        <copy file="${ver.props}" tofile="${build.dir}/edu/wisc/ssec/mcidasv/resources/build.properties" overwrite="true">
            <filterset>
                <filter token="DATE" value="${build.date}" />
                <filter token="NIGHTLY" value="" />
            </filterset>
        </copy>
    </target>

    <!-- Set nightly build properties -->
    <target name="copy.nightly.props" description="Set nightly build properties">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm"
            timezone="UTC" />
        </tstamp>
        <copy file="${ver.props}" tofile="${build.dir}/edu/wisc/ssec/mcidasv/resources/build.properties" overwrite="true">
            <filterset>
                <filter token="DATE" value="${build.date}" />
                <filter token="NIGHTLY" value="(nightly)" />
            </filterset>
        </copy>
    </target>

    <!-- Build the edu tree -->
    <target name="build" description="Build the edu tree">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${dist.dir}" />
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${sharedlib.dir}" includes="**/*.jar" />
            <fileset dir="${nativelib.dir}/macos-aarch64" includes="**/*.dylib" if:set="build.macos-aarch64" />
            <fileset dir="${nativelib.dir}/macos-intel" includes="**/*.dylib" if:set="build.macos-x86_64" />
            <fileset dir="${nativelib.dir}/linux" includes="**/*.so" if:set="build.linux" />
            <fileset dir="${nativelib.dir}/windows" includes="**/*.dll" if:set="build.windows" />
        </copy>

        <javac fork="true" srcdir="${base.dir}" destdir="${build.dir}" source="${source.ver}" target="${target.ver}"
            debug="${debug.flag}" deprecation="${deprecation.flag}" includeantruntime="false">
            <compilerarg value="-Xlint:${xlint}" />
            <classpath refid="build.classpath" />
        </javac>
        <condition property="isLinux.x86">
            <os family="unix" arch="x86" />
        </condition>
        <condition property="isLinux.x86_64">
            <or>
                <and>
                    <os family="unix" arch="x86_64"/>
                    <not>
                        <os family="mac"/>
                    </not>
                </and>
                <and>
                    <os family="unix" arch="amd64"/>
                    <not>
                        <os family="mac"/>
                    </not>
                </and>
            </or>
        </condition>
        <condition property="isWindows.x86">
            <os family="windows" arch="x86" />
        </condition>
        <condition property="isWindows.x86_64">
            <or>
                <os family="windows" arch="x86_64" />
                <os family="windows" arch="amd64" />
            </or>
        </condition>
        <condition property="isMac">
            <os family="mac" />
        </condition>
        
        <copy todir="${build.dir}" preservelastmodified="true">
            <fileset dir="${base.dir}">
                <patternset refid="jar.includes" />
                <patternset refid="local-idv.includes" />
            </fileset>
        </copy>
    </target>

    <!-- Build only the startup manager -->
    <target name="startupmanager" depends="build"
        description="Build only the startup manager">
        <tstamp prefix="jar" />
        <!-- <mkdir dir="${dist.dir}" /> -->
        <jar destfile="${dist.dir}/${app.smjar}" index="true">
            <!-- <fileset dir="${base.dir}"> -->
            <fileset dir="${build.dir}">
                <patternset refid="startupmanager.includes" />
            </fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
                <attribute name="Class-Path"
                value="idv-${idv.version}.jar mcidasv-${mcv.version}.jar mcv_userguide-${mcv.version}.jar" />
                <attribute name="Main-Class" value="${app.smclass}" />
            </manifest>
        </jar>
    </target>

    <!-- Create the standalone Jython console jar file -->
    <target name="jar.jython" depends="build"
        description="Create the standalone Jython console jar file">
        <!-- <mkdir dir="${dist.dir}" /> -->
        <tstamp prefix="jar" />
        <jar destfile="${dist.dir}/${jython.jarfile}">
            <!-- <fileset dir="${base.dir}"> -->
            <fileset dir="${build.dir}">
                <patternset refid="jython.includes" />
            </fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
                <attribute name="Class-Path" value="sysout-over-slf4j-1.0.2.jar miglayout-core-4.2.jar miglayout-swing-4.2.jar eventbus-1.4.jar logback-core-1.1.1.jar logback-classic-1.1.1.jar log4j-over-slf4j-1.7.6.jar slf4j-api-1.7.6.jar local-idv.jar commons-math3-3.2.jar rsyntaxtextarea-2.5.1.jar jul-to-slf4j-1.7.6.jar local-idv.jar visad.jar idv.jar repositorytds.jar mcv_userguide.jar" />
                <attribute name="Main-Class" value="${jython.class}" />
            </manifest>
        </jar>
    </target>

    <!-- Jar the base application jar file -->
    <target name="jar.base" description="Jar the base application jar file">
        <!-- <mkdir dir="${dist.dir}" /> -->
        <!-- <delete file="${dist.dir}/${app.jarname}" failonerror="false" /> -->
        <tstamp prefix="jar" />

        <manifestclasspath property="mcidasv.class.path" jarfile="${dist.dir}/${app.jarname}">
            <classpath refid="app.classpath" />
        </manifestclasspath>

        <jar destfile="${dist.dir}/${app.jarname}" index="false">
            <!-- <fileset dir="${base.dir}"> -->
            <fileset dir="${build.dir}">
                <patternset refid="jar.includes" />
            </fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
                <attribute name="Class-Path" value="${mcidasv.class.path}" />
                <attribute name="Main-Class" value="${app.mainclass}" />
            </manifest>
        </jar>
        <echo>manifest classpath:</echo>
        <echo>${mcidasv.class.path}</echo>
        <echo></echo>
        <echo>userguide jar: ${userguide.jarname}</echo>
    </target>

    <!-- Jar the local-idv jar file -->
    <target name="jar.local-idv" description="Jar the local-idv jar file">
        <!-- <mkdir dir="${dist.dir}" /> -->
        <!-- <delete file="${dist.dir}/${local-idv.jarname}" failonerror="false" /> -->
        <tstamp prefix="jar" />
        <manifestclasspath property="local-idv.class.path" jarfile="${dist.dir}/${local-idv.jarname}">
            <classpath refid="app.classpath" />
        </manifestclasspath>
        <jar destfile="${dist.dir}/${local-idv.jarname}" index="false">
            <!-- <fileset dir="${base.dir}"> -->
            <fileset dir="${build.dir}">
                <patternset refid="local-idv.includes" />
            </fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
                <attribute name="Class-Path" value="${local-idv.class.path}" />
                <attribute name="Main-Class" value="${app.mainclass}" />
            </manifest>
        </jar>
    </target>

    <!-- Create jar files and documentation -->
    <!-- <target name="jar"
    depends="clean, build, copy.build.props, jar.base, jar.local-idv"
    description="Create jar files and documentation" />
    -->
    <target name="jar"
    depends="build, copy.build.props, jar.base, jar.local-idv"
    description="Create jar files and documentation" />

    <!-- Create nightly jar files and documentation -->
    <target name="jar.nightly"
    depends="clean, build, copy.nightly.props, jar.base, jar.local-idv"
    description="Create nightly jar files and documentation" />

    <!-- Create signed jar files -->
    <target name="signjar" depends="jar" description="Create signed jar files">
        <signjar jar="${dist.dir}/${app.jarname}" alias="${key.alias}"
        keystore="${key.store}" storepass="${storepass}" />
        <signjar jar="${dist.dir}/${local-idv.jarname}" alias="${key.alias}"
        keystore="${key.store}" storepass="${storepass}" />
        <signjar jar="${dist.dir}/mcv_userguide-${mcv.version}.jar" alias="${key.alias}"
        keystore="${key.store}" storepass="${storepass}" />
    </target>

    <!-- Include dependencies in single jar file -->
    <!-- this doesn't appear to work when j3d/jogl is included… -->
    <target name="singlejar" depends="clean, auxdata.nodocs, build, ncidv.nolog, external.cleanup"
        description="Include dependencies in single jar file">

        <mkdir dir="${dist.dir}" />
        <mkdir dir="${build.dir}" />

        <unzip dest="${build.dir}">
            <fileset refid="mcv.libs" />
            <fileset refid="idv.libs" />
            <!-- <fileset refid="newj3d.libs" /> -->
        </unzip>

        <!-- Override default VisAD classes with custom ones -->
        <unzip src="${idvlib.dir}/local-visad-${idv.version}.jar" dest="${build.dir}" />

        <!-- Override default IDV classes with custom ones -->
        <!-- <unzip src="${idvlib.dir}/local-idv.jar" dest="${build.dir}" /> -->

<!--         <copy todir="${build.dir}">
            <fileset dir="${.dir}">
                <patternset refid="jar.includes" />
                <patternset refid="local-idv.includes" />
            </fileset>
        </copy>
 -->
        <delete dir="${build.dir}/META-INF" failonerror="false" />

        <tstamp prefix="jar" />
        <jar destfile="${dist.dir}/${app.jarname}" basedir="${build.dir}" index="false">
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
                <attribute name="Main-Class" value="${app.mainclass}" />
            </manifest>
        </jar>
    </target>

    <!-- Create distribution product -->
    <target name="dist"
        depends="clean, auxdata.nodocs, jar, ncidv.nolog, external.cleanup, startupmanager, javadoc.jar, userguide.jar"
        description="Create distribution product">
        <copy file="${build.dir}/edu/wisc/ssec/mcidasv/util/GetMem.class" 
              tofile="${dist.dir}/GetMem.class" 
              failonerror="false" />
        <copy file="${build.dir}/edu/wisc/ssec/mcidasv/util/GetVer.class" 
              tofile="${dist.dir}/GetVer.class" 
              failonerror="false" />
    </target>

    <!-- Create nightly webstart distribution product -->
    <target name="nightly"
        depends="gitupdate, auxdata.nodocs, jar.nightly, startupmanager, ncidv.nolog, external.cleanup, javadoc.jar, userguide.jar, source"
        description="Create nightly webstart distribution product" />

    <!-- Build and run McIDAS-V application (small memory) -->
    <target name="jar.run" depends="jar" description="Build and run McIDAS-V application (small memory)">
        <java classname="${app.mainclass}" fork="true" maxmemory="${run.smallheap}">
            <classpath>
                <path refid="app.classpath" />
                <pathelement location="${dist.dir}/${app.jarname}" />
            </classpath>
            <assertions refid="mcv.assertions"/>
            <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
        </java>
    </target>

  <!-- TODO: need a way to generalize these run.* targets...  -->

  <!-- Build and run McIDAS-V application (large memory) -->
  <target name="jar.runlarge" depends="jar" description="Build and run McIDAS-V application (large memory)">
    <java fork="true" maxmemory="${run.largeheap}" dir="${dist.dir}" jar="${dist.dir}/${app.jarname}">
      <classpath refid="app.classpath" />
      <assertions refid="mcv.assertions"/>
      <!-- <jvmarg value="-XX:+UseG1GC" /> -->
      <!-- <jvmarg value="-XX:+UseConcMarkSweepGC" /> -->
      <!-- <jvmarg value="-XX:+CMSClassUnloadingEnabled" /> -->
      <!-- <jvmarg value="-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses" /> -->

      <!--
        these tiered compilation flags are apparently equivalent to -client.
        that said, i am deeply ambivalent about encouraging their use, as the
        "client" JIT is nowhere near as smart as the "server" JIT…despite the
        faster startup times with -client.
      -->
      <!-- <jvmarg value="-XX:+TieredCompilation" /> -->
      <!-- <jvmarg value="-XX:TieredStopAtLevel=1" /> -->
      <jvmarg value="-noverify" />
      <jvmarg value="-XX:+DoEscapeAnalysis" />

      <!--
        The following two lines will allow the JVM to dump the heap's
        contents on an OutOfMemory exception (very helpful!).
        ${heap.dir} defaults to "/tmp/mcidasv-heapdump.hprof" but feel free
        to change it.
      -->
      <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
      <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />

      <jvmarg value="-Xdock:icon=../release/icons/mcidasv.icns" if:set="build.macos" />

      <!--
      <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
      <sysproperty key="debug.adde.reqs" value="false" />
      -->
      <!--<sysproperty key="textureWidthMax" value="${visad.texturemax}" />-->
      <sysproperty key="java.ext.dirs" value="${java.home}/lib/ext" />
      <sysproperty key="java.library.path" value="${java.home}/lib/ext" />
      <sysproperty key="loglevel" value="${run.log.level}" />
      <sysproperty key="mcv.userpath" value="${userpath.dir}" />
      <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
      <sysproperty key="debug.adde.reqs" value="true" />
      <sysproperty key="idv.usetimedriver" value="true" />
      <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
      <sysproperty key="logback.configurationFile" value="${logback.default.config}" />

      <sysproperty key="visad.java3d.noerasebackground" value="true" />
      <sysproperty key="visad.java3d.textureNpot" value="true" />
      <sysproperty key="visad.java3d.imageByRef" value="true" />
      <sysproperty key="visad.java3d.geometryByRef" value="true" />
      <sysproperty key="file.encoding" value="UTF-8" />
      <sysproperty key="python.security.respectJavaAccessibility" value="false" />
      <sysproperty key="mcidasv.darkmode" value="${darkmode}" />
      <!--
      <sysproperty key="sun.java2d.opengl" value="True" />
      <sysproperty key="sun.java2d.trace" value="log,timestamp,count,out:./java2d.log,verbose" />
      -->
      <arg value="-forceaqua" />
      <arg value="-userpath" />
      <arg value="${userpath.dir}" />
    </java>
  </target>

    <target name="jar.runlarge.jpms" depends="jar" description="Build and run McIDAS-V application (large memory)">
        <java fork="true" maxmemory="${run.largeheap}" dir="${dist.dir}" jar="${dist.dir}/mcidasv-${mcv.version}.jar">
            <classpath refid="app.classpath" />
            <assertions refid="mcv.assertions"/>

            <!-- required for jython stuff to work without jigsaw-specific changes -->
            <!--<jvmarg value="&#45;&#45;permit-illegal-access"/>-->
            <!-- add-exports allows reading from public types -->
            <jvmarg value="--add-exports" />
            <jvmarg value="java.base/jdk.internal.loader=ALL-UNNAMED" />
            <jvmarg value="--add-exports" unless:set="build.macos" />
            <jvmarg value="java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED" unless:set="build.macos" />
            <jvmarg value="--add-exports" if:set="build.macos" />
            <jvmarg value="java.desktop/com.apple.eawt=ALL-UNNAMED" if:set="build.macos" />
            <jvmarg value="--add-exports" />
            <jvmarg value="java.desktop/sun.awt=ALL-UNNAMED" />
            <jvmarg value="--add-exports" />
            <jvmarg value="java.desktop/sun.swing=ALL-UNNAMED" />
            <!-- add-opens opens up everything -->
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.io=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.annotation=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.constant=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.invoke=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.module=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.ref=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.reflect=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.math=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.net.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.channels=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.channels.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.charset=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.charset.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file.attribute=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.cert=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.interfaces=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.spec=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.text.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.chrono=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.format=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.temporal=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.zone=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent.atomic=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent.locks=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.function=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.jar=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.regex=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.stream=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.zip=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto.interfaces=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto.spec=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.net.ssl=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.callback=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.login=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.x500=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.cert=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/jdk.internal.module=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/jdk.internal.loader=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/sun.util.calendar=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.security.jgss/org.ietf.jgss=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.color=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.desktop=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.dnd=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.font=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.geom=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.im=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.im.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.image=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.image.renderable=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.print=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.beans=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.beans.beancontext=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.accessibility=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.metadata=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.bmp=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.jpeg=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.tiff=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.stream=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.attribute=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.attribute.standard=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.midi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.midi.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.sampled=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.sampled.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.border=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.colorchooser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.filechooser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.basic=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.metal=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.multi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.nimbus=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.synth=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.table=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.html=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.html.parser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.rtf=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.tree=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.undo=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/sun.java2d.opengl=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.naming/javax.naming.ldap=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.sql/java.sql=ALL-UNNAMED" />
            <!--<jvmarg value="-XX:+DoEscapeAnalysis" />-->
            <!--      <jvmarg value="-XX:+UnlockExperimentalVMOptions" />-->
            <!--      <jvmarg value="-XX:+UseZGC" />-->
            <!--      <jvmarg value="-Xlog:gc" />-->
            <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
            <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
            <jvmarg value="-Xdock:icon=../release/icons/mcidasv.icns" if:set="build.macos" />
<!--            <sysproperty key="jogamp.verbose" value="true" />-->
<!--            <sysproperty key="jogamp.debug" value="true" />-->
            <sysproperty key="jogamp.gluegen.UseTempJarCache" value="false" />
            <sysproperty key="java.library.path" value="${dist.dir}" />
            <sysproperty key="flatlaf.useNativeLibrary" value="true" />
            <sysproperty key="sun.java2d.uiScale" value="${uiscale}" if:set="uiscale"/>
            <sysproperty key="loglevel" value="${run.log.level}" />
            <sysproperty key="mcv.userpath" value="${userpath.dir}" />
            <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
            <sysproperty key="debug.adde.reqs" value="true" />
            <sysproperty key="idv.usetimedriver" value="true" />
            <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
            <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
            <sysproperty key="visad.java3d.noerasebackground" value="true" />
            <sysproperty key="visad.java3d.textureNpot" value="true" />
            <sysproperty key="visad.java3d.imageByRef" value="true" />
            <sysproperty key="visad.java3d.geometryByRef" value="true" />
            <sysproperty key="file.encoding" value="UTF-8" />
            <sysproperty key="python.security.respectJavaAccessibility" value="false" />
            <sysproperty key="mcidasv.darkmode" value="${darkmode}" />
      <arg value="-forceaqua" />
      <arg value="-userpath" />
      <arg value="${userpath.dir}" />
    </java>
  </target>

    <target name="jar.runscript.jpms" depends="jar" description="Build and run McIDAS-V application (large memory)">
        <java fork="true" maxmemory="${run.largeheap}" dir="${dist.dir}" jar="${dist.dir}/mcidasv-${mcv.version}.jar">
            <classpath refid="app.classpath" />
            <assertions refid="mcv.assertions"/>
            <!-- required for jython stuff to work without jigsaw-specific changes -->
            <!--<jvmarg value="&#45;&#45;permit-illegal-access"/>-->
            <!-- add-exports allows reading from public types -->
            <jvmarg value="--add-exports" />
            <jvmarg value="java.base/jdk.internal.loader=ALL-UNNAMED" />
            <jvmarg value="--add-exports" unless:set="build.macos" />
            <jvmarg value="java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED" unless:set="build.macos" />
            <jvmarg value="--add-exports" if:set="build.macos" />
            <jvmarg value="java.desktop/com.apple.eawt=ALL-UNNAMED" if:set="build.macos" />
            <jvmarg value="--add-exports" />
            <jvmarg value="java.desktop/sun.awt=ALL-UNNAMED" />
            <jvmarg value="--add-exports" />
            <jvmarg value="java.desktop/sun.swing=ALL-UNNAMED" />
            <!-- add-opens opens up everything -->
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.io=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.annotation=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.constant=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.invoke=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.module=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.ref=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.reflect=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.math=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.net.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.channels=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.channels.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.charset=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.charset.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file.attribute=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.cert=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.interfaces=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.spec=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.text.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.chrono=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.format=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.temporal=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.zone=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent.atomic=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent.locks=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.function=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.jar=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.regex=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.stream=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.zip=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto.interfaces=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto.spec=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.net.ssl=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.callback=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.login=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.x500=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.cert=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/jdk.internal.module=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/jdk.internal.loader=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/sun.util.calendar=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.security.jgss/org.ietf.jgss=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.color=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.desktop=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.dnd=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.font=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.geom=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.im=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.im.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.image=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.image.renderable=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.print=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.beans=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.beans.beancontext=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.accessibility=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.metadata=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.bmp=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.jpeg=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.tiff=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.stream=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.attribute=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.attribute.standard=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.midi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.midi.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.sampled=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.sampled.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.border=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.colorchooser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.filechooser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.basic=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.metal=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.multi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.nimbus=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.synth=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.table=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.html=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.html.parser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.rtf=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.tree=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.undo=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/sun.java2d.opengl=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.naming/javax.naming.ldap=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.sql/java.sql=ALL-UNNAMED" />
            <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
            <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
            <jvmarg value="-Xdock:icon=../release/icons/mcidasv.icns" if:set="build.macos" />
            <sysproperty key="jogamp.gluegen.UseTempJarCache" value="false" />
            <sysproperty key="java.library.path" value="${dist.dir}" />
            <sysproperty key="flatlaf.useNativeLibrary" value="true" />
            <sysproperty key="sun.java2d.uiScale" value="${uiscale}" />
            <sysproperty key="loglevel" value="${run.log.level}" />
            <sysproperty key="mcv.userpath" value="${userpath.dir}" />
            <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
            <sysproperty key="debug.adde.reqs" value="true" />
            <sysproperty key="idv.usetimedriver" value="true" />
            <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
            <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
            <sysproperty key="visad.java3d.noerasebackground" value="true" />
            <sysproperty key="visad.java3d.textureNpot" value="true" />
            <sysproperty key="visad.java3d.imageByRef" value="true" />
            <sysproperty key="visad.java3d.geometryByRef" value="true" />
            <sysproperty key="file.encoding" value="UTF-8" />
            <sysproperty key="python.security.respectJavaAccessibility" value="false" />

            <arg value="-forceaqua" />
            <arg value="-userpath" />
            <arg value="${userpath.dir}" />
            <arg value="-script" />
            <arg value="${pyfile}" />
        </java>
    </target>

  <target name="debug.runlarge" depends="jar" description="Build and run McIDAS-V application (large memory)">
    <java classname="${app.mainclass}" fork="true" maxmemory="${run.largeheap}">
      <classpath refid="app.classpath" />
      <assertions refid="mcv.assertions"/>
      <!-- Prepares the JVM for a debugging session on port 8001 -->
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8001,suspend=y"/>
      <!-- flags for attempting to workaround PermGen issues -->
      <jvmarg value="-XX:+UseConcMarkSweepGC" />
      <jvmarg value="-XX:+CMSClassUnloadingEnabled" />
      <jvmarg value="-XX:+CMSPermGenSweepingEnabled" />
      <jvmarg value="-XX:MaxPermSize=512m" />
      <!-- Misc performance flags -->
      <!--
      <jvmarg value="-noverify" />
      <jvmarg value="-XX:+DoEscapeAnalysis" />
      -->
      <!--
        You might want to uncomment the following two lines. They'll have the
        JVM dump the heap's contents on an OutOfMemory exception (very helpful!)
        ${heap.dir} defaults to "/tmp/javaheaps/", but feel free to change it.
      -->
      <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
      <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
      <sysproperty key="java.ext.dirs" value="${java.home}/lib/ext" />
      <sysproperty key="java.library.path" value="${java.home}/lib/ext" />
      <sysproperty key="textureWidthMax" value="${visad.texturemax}" />
      <sysproperty key="mcv.userpath" value="${userpath.dir}" />
      <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
      <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
      <sysproperty key="debug.adde.reqs" value="true" />
      <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
      <sysproperty key="file.encoding" value="UTF-8" />
      <sysproperty key="python.security.respectJavaAccessibility" value="false" />
      <!--<sysproperty key="idv.usetimedriver" value="true" />-->
      <arg value="-forceaqua" />
      <arg value="-userpath" />
      <arg value="${userpath.dir}" />
    </java>
  </target>

    <target name="debug.runlarge.jpms" depends="jar" description="Build and run McIDAS-V application (large memory)">
        <java classname="${app.mainclass}" fork="true" maxmemory="${run.largeheap}">
            <classpath refid="app.classpath" />
            <assertions refid="mcv.assertions"/>

            <!--&lt;!&ndash; required for jython stuff to work without jigsaw-specific changes &ndash;&gt;-->
            <jvmarg value="--illegal-access=warn" />
            <!-- add-exports allows reading from public types -->
            <jvmarg value="--add-exports" />
            <jvmarg value="java.base/jdk.internal.loader=ALL-UNNAMED" />
            <jvmarg value="--add-exports" unless:set="build.macos" />
            <jvmarg value="java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED" unless:set="build.macos" />
            <jvmarg value="--add-exports" if:set="build.macos" />
            <jvmarg value="java.desktop/com.apple.eawt=ALL-UNNAMED" if:set="build.macos" />
            <jvmarg value="--add-exports" />
            <jvmarg value="java.desktop/sun.awt=ALL-UNNAMED" />
            <jvmarg value="--add-exports" />
            <jvmarg value="java.desktop/sun.swing=ALL-UNNAMED" />
            <!-- add-opens opens up everything -->
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.io=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.annotation=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.constant=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.invoke=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.module=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.ref=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.lang.reflect=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.math=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.net.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.channels=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.channels.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.charset=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.charset.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file.attribute=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.nio.file.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.cert=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.interfaces=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.security.spec=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.text.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.chrono=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.format=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.temporal=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.time.zone=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent.atomic=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.concurrent.locks=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.function=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.jar=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.regex=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.stream=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/java.util.zip=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto.interfaces=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.crypto.spec=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.net=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.net.ssl=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.callback=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.login=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.auth.x500=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/javax.security.cert=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/jdk.internal.module=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/jdk.internal.loader=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.base/sun.util.calendar=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.security.jgss/org.ietf.jgss=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.color=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.desktop=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.dnd=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.font=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.geom=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.im=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.im.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.image=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.image.renderable=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.awt.print=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.beans=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/java.beans.beancontext=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.accessibility=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.metadata=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.bmp=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.jpeg=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.plugins.tiff=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.imageio.stream=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.attribute=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.attribute.standard=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.print.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.midi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.midi.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.sampled=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.sound.sampled.spi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.border=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.colorchooser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.event=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.filechooser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.basic=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.metal=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.multi=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.nimbus=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.plaf.synth=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.table=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.html=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.html.parser=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.text.rtf=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.tree=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/javax.swing.undo=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.desktop/sun.java2d.opengl=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.naming/javax.naming.ldap=ALL-UNNAMED" />
            <jvmarg value="--add-opens" />
            <jvmarg value="java.sql/java.sql=ALL-UNNAMED" />
            <jvmarg value="-noverify" />
            <jvmarg value="-Xdock:icon=../release/icons/mcidasv.icns" if:set="build.macos" />
            <!-- Prepares the JVM for a debugging session on port 8001 -->
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8001,suspend=y"/>
            <jvmarg value="-noverify" />
            <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
            <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
            <sysproperty key="jogamp.gluegen.UseTempJarCache" value="false" />
            <sysproperty key="java.library.path" value="${dist.dir}" />
            <sysproperty key="flatlaf.useNativeLibrary" value="true" />
            <sysproperty key="sun.java2d.uiScale" value="${uiscale}" />
            <sysproperty key="textureWidthMax" value="${visad.texturemax}" />
            <sysproperty key="mcv.userpath" value="${userpath.dir}" />
            <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
            <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
            <sysproperty key="debug.adde.reqs" value="true" />
            <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
            <sysproperty key="file.encoding" value="UTF-8" />
            <sysproperty key="python.security.respectJavaAccessibility" value="false" />
            <sysproperty key="mcidasv.darkmode" value="${darkmode}" />
            <arg value="-forceaqua" />
            <arg value="-userpath" />
            <arg value="${userpath.dir}" />
        </java>
    </target>

  <!-- Build McIDAS-V and run a Jython script (large memory). -->
  <!-- Here's an example shell function (should work in bash/zsh):

    function freshmcv {
      if [ -z "$1" ]; then
        ant jar.runlarge
      else
        ant -Dpyfile="${1}" jar.runscript
      fi
    }
  -->
  <target name="jar.runscript" depends="jar" description="Build McIDAS-V and run a Jython script (large memory).">
    <java fork="true" maxmemory="${run.largeheap}" dir="${dist.dir}" jar="${dist.dir}/${app.jarname}">
      <classpath refid="app.classpath" />
      <assertions refid="mcv.assertions"/>
      <jvmarg value="-XX:+UseConcMarkSweepGC" />
      <jvmarg value="-XX:+CMSClassUnloadingEnabled" />
      <jvmarg value="-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses" />
      <jvmarg value="-XX:MaxPermSize=512m" />
      <!--
        these tiered compilation flags are apparently equivalent to -client.
        that said, i am deeply ambivalent about encouraging their use, as the
        "client" JIT is nowhere near as smart as the "server" JIT…despite the
        faster startup times with -client.
      -->
      <!-- <jvmarg value="-XX:+TieredCompilation" /> -->
      <!-- <jvmarg value="-XX:TieredStopAtLevel=1" /> -->
      <jvmarg value="-noverify" />
      <!--<jvmarg value="-XX:+DoEscapeAnalysis" />-->
      <!--
        The following two lines will allow the JVM to dump the heap's
        contents on an OutOfMemory exception (very helpful!).
        ${heap.dir} defaults to "/tmp/mcidasv-heapdump.hprof" but feel free
        to change it.
      -->
      <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
      <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
      <!--
      <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
      <sysproperty key="debug.adde.reqs" value="false" />
      -->
      <!--<sysproperty key="textureWidthMax" value="${visad.texturemax}" />-->
      <sysproperty key="java.ext.dirs" value="${java.home}/lib/ext" />
      <sysproperty key="java.library.path" value="${java.home}/lib/ext" />
      <sysproperty key="loglevel" value="${run.log.level}" />
      <sysproperty key="mcv.userpath" value="${userpath.dir}" />
      <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
      <sysproperty key="debug.adde.reqs" value="true" />
      <sysproperty key="idv.usetimedriver" value="true" />
      <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
      <sysproperty key="logback.configurationFile" value="${logback.default.config}" />

      <sysproperty key="visad.java3d.textureNpot" value="true" />
      <sysproperty key="visad.java3d.imageByRef" value="true" />
      <sysproperty key="visad.java3d.geometryByRef" value="true" />
      <sysproperty key="python.security.respectJavaAccessibility" value="false" />
      <!--
      <sysproperty key="sun.java2d.opengl" value="True" />
      <sysproperty key="sun.java2d.trace" value="log,timestamp,count,out:./java2d.log,verbose" />
      -->
      <arg value="-forceaqua" />
      <arg value="-userpath" />
      <arg value="${userpath.dir}" />
      <arg value="-script" />
      <arg value="${pyfile}" />
    </java>
  </target>

    <!-- Run McIDAS-V application (small memory) -->
    <target name="run" description="Run McIDAS-V application (small memory)">
        <java classname="${app.mainclass}" fork="true" maxmemory="${run.smallheap}">
            <classpath>
                <path refid="app.classpath" />
                <pathelement location="${dist.dir}/${app.jarname}" />
            </classpath>
            <assertions refid="mcv.assertions"/>
            <!-- Disables bytecode verification; seems to bring the snappy  -->
            <!-- <jvmarg value="-noverify" /> -->

            <!-- This will make the JVM output the contents of the heap upon You can
             control the output directory and/or filename with HeapDumpPath...
             but it requires HeapDumpOnOutOfMemoryError to be enabled. -->
            <!-- <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" /> -->
            <!-- <jvmarg value="-XX:HeapDumpPath=${heap.dir}" /> -->

            <!-- Allows you to point at arbitrary local ADDE servers -->
            <!-- <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" /> -->

            <!-- Forces McIDAS-V to use Apple's Aqua L&F (only on OS X) -->
            <!-- <arg value="-forceaqua" /> -->

            <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
            <sysproperty key="python.security.respectJavaAccessibility" value="false" />
        </java>
    </target>

    <!-- Run McIDAS-V application (large memory) -->
    <target name="runlarge" description="Run McIDAS-V application (large memory)">
        <java classname="${app.mainclass}" fork="true" maxmemory="${run.largeheap}">
            <classpath>
                <path refid="app.classpath" />
                <pathelement location="${dist.dir}/${app.jarname}" />
            </classpath>
            <assertions refid="mcv.assertions"/>
            <!-- Disables bytecode verification; seems to bring the snappy  -->
            <!-- <jvmarg value="-noverify" /> -->

            <!-- This will make the JVM output the contents of the heap upon You can
             control the output directory and/or filename with HeapDumpPath...
             but it requires HeapDumpOnOutOfMemoryError to be enabled. -->
            <!-- <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" /> -->
            <!-- <jvmarg value="-XX:HeapDumpPath=${heap.dir}" /> -->

            <!-- Allows you to point at arbitrary local ADDE servers -->
            <!-- <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" /> -->

            <!-- Forces McIDAS-V to use Apple's Aqua L&F (only on OS X) -->
            <!-- <arg value="-forceaqua" /> -->

          <jvmarg value="-noverify" />
          <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
          <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
          <!-- flags for attempting to workaround PermGen issues -->
          <jvmarg value="-XX:+UseConcMarkSweepGC" />
          <jvmarg value="-XX:+CMSClassUnloadingEnabled" />
          <jvmarg value="-XX:+CMSPermGenSweepingEnabled" />
          <jvmarg value="-XX:MaxPermSize=512m" />

          <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
          <sysproperty key="debug.adde.reqs" value="true" />
          <sysproperty key="python.security.respectJavaAccessibility" value="false" />
          <!--<sysproperty key="logback.configurationFile" value="${logback.default.config}" />-->
          <arg value="-forceaqua" />
        </java>
    </target>

    <!-- Generate the javadoc documentation -->
    <target name="javadoc" description="Generate the javadoc documentation">
        <tstamp>
            <format property="javadoc.build.date" pattern="yyyy-MM-dd HH:mm Z" timezone="UTC" />
        </tstamp>
        <javadoc access="${javadoc.level}"
            header="generated at ${javadoc.build.date}"
            footer="generated at ${javadoc.build.date}"
            author="true"
            breakiterator="yes"
            destdir="${javadoc.dir}"
            doctitle="McIDAS-V ${mcidasv.version.major}.${mcidasv.version.minor}${mcidasv.version.release} API"
            maxmemory="256m"
            linksource="true"
            nonavbar="false"
            nodeprecated="false"
            nodeprecatedlist="false"
            noindex="false"
            notree="false"
            packagenames="edu.wisc.ssec.mcidasv.*"
            splitindex="true"
            source="${source.ver}"
            sourcepath="."
            use="true"
            version="true"
            windowtitle="McIDAS-V ${mcidasv.version.major}.${mcidasv.version.minor}${mcidasv.version.release} Developer Documentation">

            <classpath refid="build.classpath" />
            <link href="https://docs.oracle.com/en/java/javase/21/docs/api/" />
            <link href="https://www.ssec.wisc.edu/visad-docs/javadoc/" />
            <link href="https://docs.unidata.ucar.edu/idv/current/javadoc/" />
            <link href="https://docs.unidata.ucar.edu/netcdf-java/current/javadoc/" />
            <arg value="-Xmaxerrs" />
            <arg value="${javadoc.errors.maxnum}"/>
            <arg value="-Xmaxwarns" />
            <arg value="${javadoc.warnings.maxnum}"/>
        </javadoc>
    </target>

    <!-- Create javadoc jar file -->
    <target name="javadoc.jar" depends="javadoc" description="Create javadoc jar file">
        <mkdir dir="${dist.dir}" />
        <tstamp prefix="jar" />
        <jar destfile="${dist.dir}/${javadoc.jarname}">
            <fileset dir="${base.dir}">
                <include name="docs/javadoc/**" />
            </fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
            </manifest>
        </jar>
    </target>

    <!-- Create the userguide jar file -->
    <target name="userguide.jar" description="Create the userguide jar file">
        <exec failifexecutionfails="false" dir="${userguide.dir}"
            executable="${jhindexer.bin}">
            <arg line="${java.bin} -logfile jh.log processed" />
        </exec>
        <mkdir dir="${base.dir}/mcidas/doc/mcv_guide" />
        <copy file="${base.dir}/docs/userguide/processed/mcidasv.css"
        tofile="${base.dir}/mcidas/doc/mcv_guide/mcidasv.css" failonerror="false" />
        <tstamp prefix="jar" />
        <jar destfile="${dist.dir}/${userguide.jarname}">
            <fileset dir="${base.dir}">
                <include name="docs/userguide/**" />
                <include name="mcidas/doc/mcv_guide/mcidasv.css" />
            </fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}" />
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}" />
            </manifest>
        </jar>
    </target>

    <!-- Remove the docs/ directory from auxdata.jar -->
    <target name="auxdata.nodocs" description="Remove the docs/ directory from auxdata.jar">
        <mkdir dir="${dist.dir}/tmp" />
        <unzip src="${sharedlib.dir}/auxdata-${idv.version}.jar" dest="${dist.dir}/tmp" />

        <delete dir="${dist.dir}/tmp/auxdata/docs" failonerror="false" />
        <delete file="${dist.dir}/auxdata-${idv.version}.jar" failonerror="false" />

        <jar destfile="${dist.dir}/auxdata-${idv.version}.jar" basedir="${dist.dir}/tmp" index="true" />
        <delete dir="${dist.dir}/tmp" failonerror="false" />
    </target>

    <!-- Remove the org/slf4j directory from ncIdv.jar. -->
    <target name="ncidv.nolog" depends="build" description="Remove the org/slf4j directory from ncIdv.jar">
        <mkdir dir="${dist.dir}/tmp" />
        <unzip src="${dist.dir}/ncIdv-${ncidv.version}.jar" dest="${dist.dir}/tmp" />

        <delete dir="${dist.dir}/tmp/org/slf4j" failonerror="false" />
        <delete file="${dist.dir}/ncIdv-${ncidv.version}.jar" failonerror="false" />

        <jar destfile="${dist.dir}/ncIdv-${ncidv.version}.jar" 
             basedir="${dist.dir}/tmp" 
             index="true"
             manifest="${dist.dir}/tmp/META-INF/MANIFEST.MF"/>
        <delete dir="${dist.dir}/tmp" failonerror="false" />
    </target>

    <!-- 
    Removes the following from external.jar:
        edu/wisc/ssec/mcidasv, javax/xml, org/apache/batik, org/apache/commons/io, org/apache/commons/logging,
        org/apache/fop, org/apache/xml/serializer, org/apache/xmlcommons, org/apache/xmlgraphics, org/slf4j,
        org/w3c, org/xml
        jythonlib.jar
    -->
    <target name="external.cleanup" depends="build" description="Remove redundant/unneeded class files from external.jar">
        <mkdir dir="${dist.dir}/tmp" />
        <unzip src="${dist.dir}/external-trimmed-${idv.version}.jar" dest="${dist.dir}/tmp" />

        <delete dir="${dist.dir}/tmp/edu/wisc/ssec/mcidasv" failonerror="false" />
        <delete dir="${dist.dir}/tmp/javax/xml" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/batik" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/commons/io" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/commons/logging" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/fop" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/xml/serializer" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/xmlcommons" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/apache/xmlgraphics" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/slf4j" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/w3c" failonerror="false" />
        <delete dir="${dist.dir}/tmp/org/xml" failonerror="false" />
        <delete file="${dist.dir}/tmp/jythonlib.jar" failonerror="false" />

        <delete file="${dist.dir}/external-${idv.version}.jar" failonerror="false" />
        
        <jar destfile="${dist.dir}/external-trimmed-${idv.version}.jar"
             basedir="${dist.dir}/tmp" 
             index="true"
             manifest="${dist.dir}/tmp/META-INF/MANIFEST.MF"/>
        <delete dir="${dist.dir}/tmp" failonerror="false" />
    </target>

    <!-- Create source jar file -->
    <target name="source" description="Create source jar file">
        <jar destfile="${dist.dir}/${source.jarname}" basedir="${base.dir}" compress="true">
            <include name="build.xml" />
            <include name="edu/**" />
            <exclude name="edu/**/*.class" />
            <include name="ucar/**" />
            <exclude name="ucar/**/*.class" />
            <include name="visad/**" />
            <exclude name="visad/**/*.class" />
            <include name="release/licenses/**" />
        </jar>
    </target>

    <!-- Move the source file to install4j directory -->
    <!-- Move the source files to various destinations -->
    <target name="packsource"
            depends="source"
            description="Move the source file to install4j directory">
            
        <exec executable="${basedir}/tools/pack_source.sh"
              dir="${basedir}/tools" />
              
        <copy file="${dist.dir}/${source.jarname}"
              tofile="${media.dir}/${source.file}"
              failonerror="false" />
              
        <!-- this step is due entirely to web server permissions; the scripts
             that sync the nightly javadocs expect mcv_javadoc.jar, and I can't
             modify 'em! -->
        <copy file="${dist.dir}/${javadoc.jarname}"
              tofile="${dist.dir}/mcv_javadoc.jar"
              failonerror="false" />
    </target>

    <!-- Make the Windows and Linux installers with install4j -->
    <target name="installers_normal" depends="installer_custom_code" description="Make the installers with install4j">
        <!-- see comment attached to the "windows.keystore" property for usage info -->
        <exec dir="${release.dir}" executable="${install4jc.bin}" failifexecutionfails="true">
            <arg value="-D" />
            <arg value="IDV_VERSION=${idv.version}" />
            <arg value="--win-keystore-password=${windows.keystore}" />
            <arg value="--build-ids=9644,9652" />
            <arg value="mcidasv.install4j" />
        </exec>
    </target>
    
    <!--
      Because Apple demands things be done their way, we have to specifically
      build macOS installers on macOS machines due to signing and notarization
      requirements.
      
      See the comment near the macos.keystore property definition for usage
      information.
    -->
    <target name="installers_macos" depends="installer_custom_code" description="Separate installer task for building on macOS machines">
        <exec dir="${release.dir}" executable="${install4jc.bin}" failifexecutionfails="true">
            <arg value="-D" />
            <arg value="IDV_VERSION=${idv.version},BASEDIR=/Users/jbeavers/work/install4j" />
            <arg value="--mac-keystore-password=${macos.keystore}" />
            <!--
              The notarization account is unfortunately my (Jon's) email
              address, so for now this process is regrettably associated with
              me rather than MUG. This was a limitation imposed by having to
              go through DoIT.
              
              This email address can be found in the install4j configuration
              file.
            -->
            <arg value="--apple-id-password=${notarization.password}" />
            <arg value="--build-ids=9621,9631" />
            <arg value="mcidasv.install4j" />
        </exec>
    </target>

    <!-- exactly the same as the "installers" target, but places the created 
         installers in a directory that's more accessible to Jenkins -->
    <target name="jenkins_installers" 
            depends="installer_custom_code" 
            description="Create all Install4J installers (place them in dist)">
            
        <exec dir="${release.dir}" executable="${install4jc.bin}" failifexecutionfails="true">
            <arg value="--destination=${dist.dir}" />
            <arg value="mcidasv.install4j" />
        </exec>
        
    </target>

    <target name="exe_installers" description="TEMPORARY FOR APPSIGN_WINDOWS BRANCH">
        <exec dir="${release.dir}" executable="${install4jc.bin}" failifexecutionfails="true">
            <arg value="--build-ids=8509,8430" />
            <arg value="--destination=${dist.dir}" />
            <arg value="mcidasv.install4j" />
        </exec>
    </target>

    <!-- This builds a preferences store that will not generate tons of
         warnings for Linux users attempting to install McV. This stuff
         is only applicable to the Linux (and generic unix) installers. -->
    <target name="installer_custom_code" description="Build Install4J custom prefs store.">
        <echo>Building install4j custom code...</echo>
        <mkdir dir="${dist.dir}/install4j-custom-code"/>
        <javac fork="true"
               srcdir="${release.dir}/install4j-custom-code"
               destdir="${dist.dir}/install4j-custom-code"
               source="21"
               deprecation="${deprecation.flag}"
               includeantruntime="false">
            <compilerarg value="-Xlint:-options" />
        </javac>
    </target>

    <!-- Zip up McIDAS-V JARs. mcidasv-tiny.zip contains only local-idv.jar  -->
    <!-- and mcidasv.jar. mcidasv-alljars.zip contains all McIDAS-V JARs.    -->
    <target name="archive" depends="ncidv.nolog, external.cleanup, jar" description="Build McIDAS-V JARs and create mcidasv-tiny.zip and mcidasv-alljars.zip.">
        <!-- zip task defaults to overwriting destfile.  -->
        <zip destfile="${dist.dir}/mcidasv-tiny.zip" zip64mode="always">
            <fileset dir="${dist.dir}" includes="${local-idv.jarname}, ${app.jarname}"/>
        </zip>
        <zip destfile="${dist.dir}/mcidasv-alljars.zip" zip64mode="always">
            <fileset dir="${dist.dir}" includes="*.jar"/>
        </zip>
    </target>

    <!-- BEGIN OSX APP BUNDLE STUFF -->
    <property name="version.public" value="1.6beta1" />

    <property name="bundle.icon" value="release/icons/mcidasv.icns" />

    <property name="bundle.name" value="McIDAS-V (JAVA 8)" />

    <property name="bundle.path" value="${dist.dir}/${bundle.name}.app" />

    <property name="bundle.dmg" value="${dist.dir}/McIDAS-V ${version.public}.dmg" />

    <!-- 
        This is the name associated with the key from Apple. 
        NOTE: pass the actual value in via a property on the command line:
        
          ant -Dbundle.identity="SIGNING IDENTITY HERE" appbundle.sign
        
        The command line definition of "bundle.identity" will take precedence 
        over the defintion below.
    -->
    <property name="bundle.identity" value="" />

    <!-- 
    This checks for a non-empty value in bundle.identity. If the value is an 
    empty string, the "appbundle.sign" target will not run
    -->
    <condition property="hasidentity">
        <not>
            <equals arg1="${bundle.identity}" arg2=""/>
        </not>
    </condition>

    <target name="appbundle.clean" description="Delete previously built McIDAS-V app bundle (and DMG).">
        <delete dir="${bundle.path}" failonerror="false" />
        <delete file="${bundle.dmg}" failonerror="false" />
    </target>

    <target name="appbundle.build" depends="jar" description="Generate McIDAS-V.app.">
        <mkdir dir="${dist.dir}" />
        <taskdef name="bundleapp"
                 classpath="lib/build/mcvappbundler-1.0rc1.jar"
                 classname="com.oracle.appbundler.AppBundlerTask" />

        <!-- get SHA512 checksum of edu/wisc/ssec/mcidasv/resources/version.properties -->
        <exec executable="/bin/bash" outputproperty="version.internal" failifexecutionfails="true">
            <arg value="-c" />
            <arg value="/usr/bin/shasum -a 512 ${ver.props} | head -n1 | awk '{print $1;}'" />
        </exec>

        <!-- locate the system's Java 1.8 -->
        <exec executable="/usr/libexec/java_home" outputproperty="runtime_18" failifexecutionfails="true">
            <arg value="-v" />
            <arg value="1.8" />
        </exec>
        
        <exec executable="/bin/bash" outputproperty="bundle.jdk" failifexecutionfails="true">
            <arg value="-c" />
            <arg value="echo ${runtime_18} | perl -pe 's/^.*\/([\-\.\w]+\.jdk)\/.*$/$1/'" />
        </exec>

        <bundleapp classpathref="app.classpath"
                   outputdirectory="${dist.dir}"
                   name="${bundle.name}"
                   displayname="McIDAS-V"
                   executableName="mcidasv"
                   identifier="edu.wisc.ssec.mcidasv.19b1"
                   shortversion="${version.public}"
                   version="${version.internal}"
                   icon="${bundle.icon}"
                   mainclassname="edu.wisc.ssec.mcidasv.McIDASV"
                   copyright="2025"
                   debug="true"
                   applicationCategory="public.app-category.weather">

            <!-- TODO(jon): can/should we bundle the local servers in the repo? -->
            <!-- NOTE: osx local servers need to be $PWD/lib/build/adde -->
            <sharedsupport path="lib/build/adde" />

            <runtime dir="${runtime_18}"/>
            <arch name="x86_64"/>
            <!-- Workaround since the icon parameter for bundleapp doesn't work -->
            <option value="-Xdock:icon=Contents/Resources/${bundle.icon}"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Dcom.apple.macos.use-file-dialog-packages=true"/>
            <option value="-Dcom.apple.macos.useScreenMenuBar=true"/>
            <option value="-Dcom.apple.mrj.application.apple.menu.about.name=McIDAS-V"/>
            <option value="-Dcom.apple.smallTabs=true"/>
            <option value="-Dfile.encoding=UTF-8"/>
            <option value="-Dpython.security.respectJavaAccessibility=false" />
            <option value="-Ddebug.localadde.rootdir=$APP_ROOT/Contents/SharedSupport/adde" />
            <option name="logback" value="-Dlogback.configurationFile=$USER_HOME/Documents/McIDAS-V/logback.xml" />
            <option name="userpath" value="-Dmcv.userpath=$USER_HOME/Documents/McIDAS-V" />
            <option name="mcidasvlog" value="-Dmcv.logpath=$USER_HOME/Documents/McIDAS-V/mcidasv.log" />
            <argument value="-forceaqua" />
            <argument value="-userpath" />
            <argument value="$USER_HOME/Documents/McIDAS-V" />
        </bundleapp>
    </target>
    
    <!--
        This target will use the "codesign" utility to sign the bundle that was
        created by the "bundle_18" target.
    -->
    <target name="appbundle.sign" 
            depends="appbundle.build" 
            description="Sign the McIDAS-V application bundle.">
            
        <fail message="Please provide a value for bundle.identity: ant -Dbundle.identity='YOUR SIGNING IDENTITY' appbundle.sign" 
              unless="hasidentity" />
              
        <!-- 
        It turns out that the "codesign" utility is not compatible with 
        symlinks. Regrettably, the OSX JRE contains a symlink. 
        
        The following exec task removes the symlink and places a copy of 
        the linked file in the directory that contained said symlink.
        -->
        <exec executable="/bin/bash" failifexecutionfails="true">
            <arg value="-c" />
            <arg value="/bin/rm -f '${bundle.path}/Contents/PlugIns/${bundle.jdk}/Contents/MacOS/libjli.dylib' ; /bin/cp -f '${bundle.path}/Contents/PlugIns/${bundle.jdk}/Contents/Home/jre/lib/jli/libjli.dylib' '${bundle.path}/Contents/PlugIns/${bundle.jdk}/Contents/MacOS/'" />
        </exec>
        
        <exec executable="/usr/bin/codesign" failifexecutionfails="true">
            <arg value="-s" />
            <arg value="${bundle.identity}" />
            <arg value="-fv" />
            <arg value="--deep" />
            <arg value="${bundle.path}" />
        </exec>
    </target>
    
    <target name="appbundle.dist" depends="appbundle.clean, appbundle.sign" description="Package app bundle stuff for distribution.">
        <echo>Creating DMG. Please be patient!</echo>
        <exec executable="/usr/bin/hdiutil" failifexecutionfails="true">
            <arg value="create" />
            <arg value="-srcfolder" />
            <arg value="${bundle.path}" />
            <arg value="${bundle.dmg}" />
        </exec>
    </target>
    <!-- END OSX APP BUNDLE STUFF -->

    <!--                           HERE BE DRAGONS                           -->
    <!-- These things allow you to automatically use YourKit to profile an   -->
    <!-- ant build. Everything is still rather simplistic, but you may find  -->
    <!-- one of the "memory.profiler", "sampling.profiler", or               -->
    <!-- "tracing.profiler" targets useful. Don't use "profiler.runlarge"!   -->

    <!-- For the time being, I'm using the testing release of YourKit 11.    -->
    <!-- It's free and there is no registration process (last I checked):    -->
    <!-- http://www.yourkit.com/eap/                                         -->
    <!-- YourKit is especially generous in that they provide free licenses   -->

    <!-- This value will regrettably be user and platform depedent. Look at  -->
    <!-- http://www.yourkit.com/docs/11/help/agent.jsp                       -->
    <property name="yourkit.agentlib" value="/Applications/YourKit_Java_Profiler_2014_build_14108.app/Contents/Resources/bin/mac/libyjpagent.jnilib" />

    <target name="memory.profiler" description="Starts McIDAS-V and takes a snapshot of performance and memory at shutdown.">
        <antcall target="profiler.runlarge">
            <param name="yourkit.options" value="onexit=memory,onexit=snapshot" />
        </antcall>
    </target>

    <target name="sampling.profiler" description="Starts McIDAS-V with CPU sampling (find performance problems)">
        <antcall target="profiler.runlarge">
            <param name="yourkit.options" value="sampling,noj2ee" />
        </antcall>
    </target>

    <target name="tracing.profiler" description="Starts McIDAS-V with CPU tracing (look at each method invocation)">
        <antcall target="profiler.runlarge">
            <param name="yourkit.options" value="tracing,noj2ee" />
        </antcall>
    </target>

    <target name="ugh.profiler" description="CPU sampling, performance/memory snapshot at shutdown.">
        <antcall target="profiler.runlarge">
            <param name="yourkit.options" value="onexit=memory,onexit=snapshot,tracing,noj2ee" />
        </antcall>
    </target>

    <!-- Build and run McIDAS-V application (large memory) -->
    <target name="profiler.runlarge" depends="jar" description="Build and run McIDAS-V application (large memory)">
        <java classname="${app.mainclass}" fork="true" maxmemory="${run.largeheap}">
            <classpath refid="app.classpath" />
            <assertions refid="mcv.assertions"/>
            <jvmarg value="-agentpath:${yourkit.agentlib}=${yourkit.options}" />
            <jvmarg value="-XX:+UseConcMarkSweepGC" />
            <jvmarg value="-XX:+CMSClassUnloadingEnabled" />
            <jvmarg value="-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses" />
            <jvmarg value="-XX:MaxPermSize=512m" />
            <jvmarg value="-noverify" />
            <!--
              The following two lines will allow the JVM to dump the heap's
              contents on an OutOfMemory exception (very helpful!).
              ${heap.dir} defaults to "/tmp/mcidasv-heapdump.hprof" but feel free
              to change it.
            -->
            <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
            <jvmarg value="-XX:HeapDumpPath=${heap.dir}" />
            <sysproperty key="java.ext.dirs" value="${java.home}/lib/ext" />
            <sysproperty key="java.library.path" value="${java.home}/lib/ext" />
            <sysproperty key="loglevel" value="${run.log.level}" />
            <sysproperty key="mcv.userpath" value="${userpath.dir}" />
            <sysproperty key="mcv.logpath" value="${userpath.dir}/mcidasv.log" />
            <sysproperty key="debug.adde.reqs" value="true" />
            <sysproperty key="idv.usetimedriver" value="true" />
            <sysproperty key="debug.localadde.rootdir" value="${addeservers.dir}" />
            <sysproperty key="logback.configurationFile" value="${logback.default.config}" />
            <sysproperty key="visad.java3d.textureNpot" value="true" />
            <sysproperty key="visad.java3d.imageByRef" value="true" />
            <sysproperty key="visad.java3d.geometryByRef" value="true" />
            <sysproperty key="python.security.respectJavaAccessibility" value="false" />
            <sysproperty key="mcidasv.darkmode" value="${darkmode}" />
            <!--
            <sysproperty key="sun.java2d.opengl" value="True" />
            <sysproperty key="sun.java2d.trace" value="log,timestamp,count,out:./java2d.log,verbose" />
            -->
            <arg value="-forceaqua" />
            <arg value="-userpath" />
            <arg value="${userpath.dir}" />
        </java>
    </target>
</project>
